<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.tripApp.member.mapper.MemberMapper">

    <resultMap type="memberDto" id="member">
        <result column="user_id" property="userId"/>
        <result column="user_name" property="userName"/>
    </resultMap>
    
    <resultMap type="memberDto" id="memberAll" extends="member">
        <result column="user_pw" property="userPw"/>
        <result column="nickname" property="userNickname"/>
        <result column="email_id" property="emailId"/>
        <result column="email_domain" property="emailDomain"/>
        <result column="join_date" property="joinDate"/>
        <result column="admin" property="admin"/>
        <result column="profile_image" property="profileImage"/>
        <result column="profile_url" property="profileUrl"/>
        <result column="gender" property="gender"/>
        <result column="birth" property="birth"/>
        <result column="reliability" property="reliability"/>
    </resultMap>

    <select id="idCheck" parameterType="String" resultType="int">
        select count(user_id)
        from user
        where user_id = #{id}
    </select>
    
    <select id="nicknameCheck" parameterType="String" resultType="int">
        select count(nickname)
        from user
        where nickname = #{userNickname}
    </select>

    <insert id="registerMember" parameterType="memberDto">
        insert into user (user_id, user_name, user_pw, nickname, gender, birth, email_id, email_domain, profile_image, profile_url)
        values (#{userId}, #{userName}, #{userPw}, #{userNickname}, #{gender}, DATE(#{birth}), #{emailId}, #{emailDomain}, #{profileImage},#{profileUrl})
    </insert>

    <select id="login" parameterType="map" resultMap="member">
        select user_id, user_name
        from user
        where user_id = #{userId} and user_pw = #{userPw}
    </select>
    
    <select id="listMember" resultMap="memberAll">
        select user_id, user_name, user_pw, email_id, email_domain, join_date, admin, profile_image, profile_url
        from user
        order by join_date
    </select>

    <select id="viewMember" parameterType="string" resultMap="memberAll">
        select *
        from user
        where user_id = #{userId}
    </select>
    
    
    <update id="updateMember" parameterType="memberDto">
        update user set user_name = #{userName}, user_pw = #{userPw}, nickname = #{userNickname}, 
        gender = #{gender}, birth = #{birth}, email_id = #{emailId}, email_domain = #{emailDomain}, 
        profile_image = #{profileImage}, profile_url = #{profileUrl}
        where user_id = #{userId}
    </update>
    
    <delete id="deleteMember" parameterType="String">
        delete from user
        where user_id = #{userId}
    </delete>
    
    <select id="getRefreshToken" parameterType="String" resultType="String">
        select token from user where user_id = #{userId}
    </select>
    
    <update id="saveRefreshToken" parameterType="map">
        update user set token = #{token} where user_id = #{userId}
    </update>
    
    <update id="deleteRefreshToken" parameterType="map">
        update user set token = #{token, jdbcType=VARCHAR}
        where user_id = #{userId}
    </update>
    
</mapper>